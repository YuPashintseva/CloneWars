[{"C:\\Users\\Johnatan\\Desktop\\cloneWars20\\rsclone\\rsclone\\src\\index.js":"1","C:\\Users\\Johnatan\\Desktop\\cloneWars20\\rsclone\\rsclone\\src\\App.js":"2","C:\\Users\\Johnatan\\Desktop\\cloneWars20\\rsclone\\rsclone\\src\\components\\i18next.js":"3","C:\\Users\\Johnatan\\Desktop\\cloneWars20\\rsclone\\rsclone\\src\\components\\Trailer.js":"4","C:\\Users\\Johnatan\\Desktop\\cloneWars20\\rsclone\\rsclone\\src\\components\\SearchArea.js":"5","C:\\Users\\Johnatan\\Desktop\\cloneWars20\\rsclone\\rsclone\\src\\components\\MovieList.js":"6","C:\\Users\\Johnatan\\Desktop\\cloneWars20\\rsclone\\rsclone\\src\\components\\FilmPage.js":"7","C:\\Users\\Johnatan\\Desktop\\cloneWars20\\rsclone\\rsclone\\src\\components\\WatchList.js":"8","C:\\Users\\Johnatan\\Desktop\\cloneWars20\\rsclone\\rsclone\\src\\components\\FilmList.js":"9","C:\\Users\\Johnatan\\Desktop\\cloneWars20\\rsclone\\rsclone\\src\\components\\GoogleAuth.js":"10","C:\\Users\\Johnatan\\Desktop\\cloneWars20\\rsclone\\rsclone\\src\\components\\Statistics.js":"11","C:\\Users\\Johnatan\\Desktop\\cloneWars20\\rsclone\\rsclone\\src\\components\\Footer.js":"12","C:\\Users\\Johnatan\\Desktop\\cloneWars20\\rsclone\\rsclone\\src\\components\\CaurouselMain.js":"13","C:\\Users\\Johnatan\\Desktop\\cloneWars20\\rsclone\\rsclone\\src\\components\\Movie.js":"14","C:\\Users\\Johnatan\\Desktop\\cloneWars20\\rsclone\\rsclone\\src\\components\\ModalWindow.js":"15"},{"size":711,"mtime":1612266538784,"results":"16","hashOfConfig":"17"},{"size":12418,"mtime":1612287315121,"results":"18","hashOfConfig":"17"},{"size":1198,"mtime":1612266538784,"results":"19","hashOfConfig":"17"},{"size":471,"mtime":1612266538770,"results":"20","hashOfConfig":"17"},{"size":963,"mtime":1612287264625,"results":"21","hashOfConfig":"17"},{"size":816,"mtime":1612266538768,"results":"22","hashOfConfig":"17"},{"size":4379,"mtime":1612266538765,"results":"23","hashOfConfig":"17"},{"size":3354,"mtime":1612266538770,"results":"24","hashOfConfig":"17"},{"size":8635,"mtime":1612285875575,"results":"25","hashOfConfig":"17"},{"size":2114,"mtime":1612286455121,"results":"26","hashOfConfig":"17"},{"size":4483,"mtime":1612266538769,"results":"27","hashOfConfig":"17"},{"size":2378,"mtime":1612266538766,"results":"28","hashOfConfig":"17"},{"size":9800,"mtime":1612287038086,"results":"29","hashOfConfig":"17"},{"size":1667,"mtime":1612266538768,"results":"30","hashOfConfig":"17"},{"size":4668,"mtime":1612266538767,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"cfepbv",{"filePath":"35","messages":"36","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"C:\\Users\\Johnatan\\Desktop\\cloneWars20\\rsclone\\rsclone\\src\\index.js",[],["71","72"],"C:\\Users\\Johnatan\\Desktop\\cloneWars20\\rsclone\\rsclone\\src\\App.js",["73","74","75","76","77","78","79","80"],"C:\\Users\\Johnatan\\Desktop\\cloneWars20\\rsclone\\rsclone\\src\\components\\i18next.js",["81"],"import i18next from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport common_en from \"../translations/en\";\r\nimport common_ru from \"../translations/ru\";\r\n// don't want to use this?\r\n// have a look at the Quick start guide\r\n// for passing in lng and translations on init\r\n\r\nconst Language = [\"en\", \"ru\"];\r\n\r\nconst resources = {\r\n  en: {\r\n    translation: common_en,\r\n  },\r\n  ru: {\r\n    translation: common_ru,\r\n  },\r\n};\r\n\r\ni18next\r\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\r\n  // learn more: https://github.com/i18next/i18next-http-backend\r\n  //.use(Backend)\r\n  // detect user language\r\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\r\n  //.use(LanguageDetector)\r\n  // pass the i18n instance to react-i18next.\r\n  .use(initReactI18next)\r\n  // init i18next\r\n  // for all options read: https://www.i18next.com/overview/configuration-options\r\n  .init({\r\n    resources,\r\n    lng: \"en\",\r\n    keySeparator: false,\r\n    interpolation: {\r\n      escapeValue: false, // not needed for react as it escapes by default\r\n    },\r\n  });\r\n\r\nexport default i18next;\r\n","C:\\Users\\Johnatan\\Desktop\\cloneWars20\\rsclone\\rsclone\\src\\components\\Trailer.js",[],"C:\\Users\\Johnatan\\Desktop\\cloneWars20\\rsclone\\rsclone\\src\\components\\SearchArea.js",[],"C:\\Users\\Johnatan\\Desktop\\cloneWars20\\rsclone\\rsclone\\src\\components\\MovieList.js",[],"C:\\Users\\Johnatan\\Desktop\\cloneWars20\\rsclone\\rsclone\\src\\components\\FilmPage.js",["82","83","84","85"],"import React from 'react';\r\nimport star from './assets/megastar.png';\r\nimport CarouselMain from './CaurouselMain';\r\n\r\n\r\n class FilmPage extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {video:\"\",font:'', dat:JSON.parse(sessionStorage.getItem(\"val\")), lang: this.props.lang, id: sessionStorage.getItem(\"val\").id};\r\n    }\r\n\r\n    async updateURL(lang, id) {\r\n        let response ='';\r\n        try {\r\n            let response = await fetch(`https://api.themoviedb.org/3/movie/${id}?api_key=fb0fcc2d34caffc53da53d676fbf678a&language=${lang}`);\r\n            const json = await response.json();\r\n            return json;\r\n        } catch(err) {\r\n            alert(err);\r\n        }\r\n    }\r\n\r\n    async componentDidMount(){\r\n     const response = await fetch(`https://api.themoviedb.org/3/movie/${this.state.dat.id}/videos?api_key=fb0fcc2d34caffc53da53d676fbf678a&language=${this.state.lang}`);\r\n     const res = await response.json();\r\n     this.setState({ video: res.results[0]?res.results[0].key:''});\r\n     let val = JSON.parse(sessionStorage.getItem(\"val\"));\r\n     this.setState({dat: val});\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        let res = '';\r\n        if (prevProps.lang !== this.props.lang) {\r\n            console.log(prevProps, this.props.lang)    \r\n            res = this.updateURL(this.props.lang, this.state.dat.id).then((value) => {\r\n                this.setState({ dat: value});\r\n                this.setState({lang: this.props.lang});\r\n            })\r\n        }\r\n    }\r\n    componentWillReceiveProps(props) {\r\n        this.setState({font:props})\r\n        \r\n      }\r\n    render(){\r\n        return(\r\n            \r\n            <div id = \"fp\" className=\" container-fluid wrapperStyle\" style={{fontFamily: this.state.font.value}}>\r\n               \r\n               <div id = \"upperBlock\" className=\"wrapper\">\r\n                 <div className=\"row\"></div>\r\n                 <div className=\"row\">\r\n\r\n                     <h2 className=\"col\">{this.props.lang === 'ru' ? this.state.dat.title :this.state.dat.original_title}</h2>\r\n                    \r\n                     \r\n                     <h4 className=\"col-auto\">{this.props.lang === 'ru' ? 'Рейтинг':'Average Vote:'} {this.state.dat.vote_average}\r\n                     <img className = \"star\"src={star} ></img>\r\n                     </h4>\r\n                     \r\n                     \r\n                     <h4 className=\"col-auto\">{this.props.lang === 'ru' ? 'Голоса':'Votes:'} {this.state.dat.vote_count}</h4>\r\n                \r\n               </div>\r\n               </div>\r\n               <div id = \"briefInfo\" className=\"wrapper\">\r\n                   <h5>{this.props.lang === 'ru' ? 'Дата выпуска':'Release Date:'} {this.state.dat.release_date}</h5>\r\n                   <div></div>\r\n                </div>\r\n\r\n               <div id = \"photoVideo\" className=\"row\" style={{padding:'1% 5% 1% 5%', margin:'0%', border:'0%'}}>\r\n                   \r\n                <img  width=\"36%\" height =\"auto\" src={`https://image.tmdb.org/t/p/original/${this.state.dat.poster_path}`} alt={this.state.dat.title} style={{ margin:'2%'}}/>\r\n                {this.state.video?(\r\n                <iframe  width=\"56%\" height=\"auto\" src={`https://www.youtube.com/embed/${this.state.video}`} style={{ margin:'2%'}}/>\r\n                ):(\r\n                <div style={{color:'white', margin:'0% 5% 5% 1%',maxWidth:'45%'}}>\r\n                Sorry, there seems to be no video provided for this film. \r\n                <hr/>The Universe wants you to watch it without spoilers, apparently.</div>\r\n                )}\r\n               </div>\r\n               <div style={{  margin: \"8px\"}}>\r\n               <h4 style={{  fontWeight: \"bolder\"}}>{this.props.lang === 'ru' ? 'Обзор':'Overview'}:</h4>\r\n              <h5 > {this.state.dat.overview}</h5></div>\r\n             \r\n               <div id = \"videoCarousel\" className=\"wrapper\"></div>\r\n               <div id = \"photoCarousel\" className=\"wrapper\"></div>\r\n               <div id = \"cast\"></div>\r\n               <div className=\"head-text\">\r\n               {this.props.lang === 'ru' ? 'Актеры':'Actors'}\r\n               </div>\r\n               <CarouselMain type={\"actors\"} filmId={this.state.dat.id} lang={this.props.lang} key={1} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default FilmPage;","C:\\Users\\Johnatan\\Desktop\\cloneWars20\\rsclone\\rsclone\\src\\components\\WatchList.js",[],"C:\\Users\\Johnatan\\Desktop\\cloneWars20\\rsclone\\rsclone\\src\\components\\FilmList.js",["86","87"],"import React from 'react';\r\nimport Carousel from \"react-multi-carousel\";\r\nimport ModalWindow from './ModalWindow';\r\nimport CaurouselMain from './CaurouselMain';\r\nimport 'react-multi-carousel/lib/styles.css';\r\nimport star from './assets/star.png'\r\nimport play from './assets/play.png'\r\nimport info from './assets/info-grey.png';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nconst responsive = {\r\n    superLargeDesktop: {\r\n      breakpoint: { max: 4000, min: 3000 },\r\n      items: 5\r\n    },\r\n    desktop: {\r\n      breakpoint: { max: 3000, min: 1024 },\r\n      items: 4\r\n    },\r\n    tablet: {\r\n      breakpoint: { max: 1024, min: 464 },\r\n      items: 3\r\n    },\r\n    mobile: {\r\n      breakpoint: { max: 464, min: 0 },\r\n      items: 1\r\n    }\r\n  };\r\n\r\nclass FilmList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {data: [], dataMain: [], value: \"\", showHide: false, currFilmInfo: {}, showAlert: false, lang: this.props.lang};\r\n        this.handleModalShowHide = this.handleModalShowHide.bind(this);\r\n        this.handleModalShowHide2 = this.handleModalShowHide2.bind(this);\r\n        this.escFunction = this.escFunction.bind(this);\r\n    }\r\n\r\n    escFunction(event){\r\n        if(event.keyCode === 27) {\r\n            this.setState({showHide: false});\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const response = await fetch(`https://api.themoviedb.org/3/movie/popular?api_key=fb0fcc2d34caffc53da53d676fbf678a&language=${this.props.lang}&page=1`);\r\n        const json = await response.json();\r\n        this.setState({ data: json});\r\n        sessionStorage.setItem('fullInf',JSON.stringify(json.results));\r\n        document.addEventListener(\"keydown\", this.escFunction, false);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        document.removeEventListener(\"keydown\", this.escFunction, false);\r\n    }\r\n\r\n    returnState(){\r\n        return this.state;\r\n    }\r\n\r\n    \r\n    async updateURL(lang) {\r\n        let response ='';\r\n        try {\r\n            let response = await fetch(`https://api.themoviedb.org/3/movie/popular?api_key=fb0fcc2d34caffc53da53d676fbf678a&language=${lang}&page=1`);\r\n            const json = await response.json();\r\n            return json;\r\n        } catch(err) {\r\n            alert(err);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        let res = '';\r\n        if (prevProps.lang !== this.props.lang) {\r\n            let lan = 'en';\r\n            this.state.lang === 'en' ? lan = 'ru' : lan = 'en';\r\n            res = this.updateURL(lan).then((value) => {\r\n                this.setState({ data: value});\r\n                this.setState({lang: this.props.lang});\r\n            })\r\n        }\r\n    }\r\n\r\n    handleModalShowHide(film, isneedAlert) {\r\n        this.setState({ showHide: !this.state.showHide });\r\n        this.setState({ showAlert: isneedAlert });\r\n        this.setState({ currFilmInfo: film });\r\n    }\r\n\r\n    handleModalShowHide2() {\r\n        this.setState({ showHide: !this.state.showHide });\r\n    }\r\n    interestedCount(title) {\r\n        if(localStorage.getItem('count')){\r\n            let obj = JSON.parse(localStorage.getItem('count'));\r\n            if (obj[title]) {\r\n                obj[title] = parseInt(obj[title])+1;\r\n            } else {\r\n                obj[title] = 1;\r\n            }\r\n            localStorage.setItem('count', JSON.stringify(obj));\r\n        }\r\n        else {\r\n            let obj ={};\r\n            obj[title] = 1;\r\n            localStorage.setItem('count', JSON.stringify(obj));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let mod = '';\r\n        if (this.state.data.results) {\r\n            if (this.state.showHide) {\r\n                mod = <ModalWindow handleModalShowHide = {this.handleModalShowHide2} filmInfo = {this.state.currFilmInfo} toWatchList={this.state.showAlert} lang={this.state.lang} />\r\n            }\r\n            return (\r\n                <div>\r\n                <CaurouselMain type={\"films\"} lang={this.state.lang} key={2} />\r\n\r\n                <div className=\"head-text\">\r\n                    {this.props.lang === 'ru' ? 'Рекомендуемые фильмы': 'What to watch'}\r\n                </div>\r\n                {mod}\r\n                <Carousel\r\n                swipeable={false}\r\n                draggable={true}\r\n                showDots={false}\r\n                responsive={responsive}\r\n                ssr={true}\r\n                infinite={false}\r\n                autoPlaySpeed={1000}\r\n                keyBoardControl={true}\r\n                customTransition=\"all .5\"\r\n                transitionDuration={1000}\r\n                containerClass=\"carousel-container\"\r\n                dotListClass=\"custom-dot-list-style\"\r\n                itemClass=\"carousel-item-padding\"\r\n                centerMode={false}\r\n                slidesToSlide={3}\r\n            >\r\n            \r\n            {this.state.data.results.map(el => (\r\n                <div element={el.id} key ={el.id}>\r\n                    <div className=\"films-list-img App-link\" >\r\n                    \r\n                        <Link style={{ textDecoration: 'none', color: 'white' }} to= \"/rsclone/FilmPage\" > \r\n                            <img className=\"poster-img\" onClick={()=>this.interestedCount(el.original_title)} onMouseOver={()=> \r\n                                    {\r\n                                        sessionStorage.removeItem(\"val\");\r\n                                        sessionStorage.setItem(\"val\",JSON.stringify(el));\r\n                                        sessionStorage.removeItem(\"lang\");\r\n                                        sessionStorage.setItem(\"lang\",this.props.lang);\r\n                                    }\r\n                                }  src={`https://image.tmdb.org/t/p/original/${el.poster_path}`} alt={el.title}/>\r\n                        </Link>    \r\n                       \r\n                        <div className=\"bottom-content-wrapper\">\r\n                            <div className=\"rating\">\r\n                                <div className=\"vote\">\r\n       \r\n                                  <img className = \"star\" src={star} alt=\"star icon\" />\r\n                                    <div className=\"vote_average\">{el.vote_average}</div>\r\n                                </div>\r\n                            </div>\r\n                           <Link style={{ textDecoration: 'none', color: 'white' }} to= \"/rsclone/FilmPage\">\r\n                                <div className=\"film-title\" onClick={()=>this.interestedCount(el.original_title)} onMouseOver={()=>\r\n                                    {\r\n                                        sessionStorage.removeItem(\"val\");\r\n                                        sessionStorage.setItem(\"val\",JSON.stringify(el));\r\n                                        sessionStorage.removeItem(\"lang\");\r\n                                        sessionStorage.setItem(\"lang\",this.props.lang);\r\n                                    }\r\n                                }>{el.title}</div>\r\n                            </Link> \r\n                            \r\n                            <button type=\"button\" className=\"add-to-watchlist-btn\" onClick = {() => {this.handleModalShowHide(el, true); this.props.watchListincrement(el.id); }}>{this.props.lang === 'ru'? '+ Добавить к просмотру' : '+ Watchlist' }</button>\r\n                            <div className=\"additional-info\">\r\n                                \r\n                                    <div className=\"trailer\">                                \r\n                                        <img src={play} alt=\"play button\" className=\"play-button\"/>{this.props.lang === 'ru' ? 'Трейлер' : 'Trailer'}\r\n                                    </div>\r\n                              \r\n                                <div className=\"info-button-wrapper\">\r\n                                    <img src={info} alt=\"info button\" className=\"info-button\" onClick = {() => this.handleModalShowHide(el, false)}/> \r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            ))};\r\n                \r\n            </Carousel>\r\n            <div className=\"head-text\">\r\n                {this.props.lang === 'ru' ? 'Звёзды' : 'Popular people'}\r\n            </div>\r\n            <CaurouselMain type={\"people\"} lang={this.state.lang} key={1} />\r\n            </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"text-white\">Wait...</div>\r\n            );\r\n        }\r\n    \r\n    }\r\n\r\n}\r\n\r\n\r\nexport default FilmList;","C:\\Users\\Johnatan\\Desktop\\cloneWars20\\rsclone\\rsclone\\src\\components\\GoogleAuth.js",["88","89","90","91"],"import React from \"react\";\r\nimport profile from '../components/assets/fake.png';\r\n\r\nclass GoogleAuth extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isSignedIn: null,\r\n      userInfo: null,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    window.gapi.load(\"client:auth2\", () => {\r\n      window.gapi.client\r\n        .init({\r\n          clientId:\r\n            \"36766060663-gomtrj195r1ct8fvhl8blr7ef7tuuucj.apps.googleusercontent.com\",\r\n          scope: \"email\",\r\n        })\r\n        .then(() => {\r\n          this.auth = window.gapi.auth2.getAuthInstance();\r\n          this.setState({ isSignedIn: this.auth.isSignedIn.get() });\r\n          this.setState({ userInfo: this.auth.currentUser.get() });\r\n          this.auth.isSignedIn.listen(this.onAuthChange);\r\n        });\r\n    });\r\n  }\r\n\r\n\r\n  showCurrentUserInfo() {\r\n    var googleUser = this.auth.currentUser.get().Mt;\r\n    return googleUser.Mt;\r\n  }\r\n\r\n  onAuthChange = () => {\r\n    this.setState({ isSignedIn: this.auth.isSignedIn.get() });\r\n    this.setState({ userInfo: this.auth.currentUser.get() });\r\n  };\r\n\r\n  onSignIn = () => {\r\n    this.auth.signIn();\r\n  };\r\n\r\n  onSignOut = () => {\r\n    this.auth.signOut();\r\n  };\r\n\r\n\r\n  renderAuthButton() {\r\n    if (this.state.isSignedIn === null) {\r\n      return null;\r\n    } else if (this.state.isSignedIn) {\r\n      let profile = this.auth.currentUser.get().getBasicProfile();\r\n      return (\r\n        <a onClick={this.onSignOut} className=\"log-in-button\">\r\n          {(this.auth.currentUser.get().getBasicProfile()) ? (\r\n            <img\r\n              className=\"user-img\"\r\n              src={profile.getImageUrl()}\r\n              alt=\"user image\"\r\n            />\r\n          ) : null}\r\n          {this.state.userInfo ? profile.getName() : null}\r\n        </a>\r\n      );\r\n    } else {\r\n      return (\r\n        <a onClick={this.onSignIn} className=\"nav-link log-in-button\">\r\n          SignIn\r\n        </a>\r\n      );\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <a href=\"/\" className=\"nav-item\">\r\n        {this.renderAuthButton()}\r\n      </a>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoogleAuth;\r\n","C:\\Users\\Johnatan\\Desktop\\cloneWars20\\rsclone\\rsclone\\src\\components\\Statistics.js",[],"C:\\Users\\Johnatan\\Desktop\\cloneWars20\\rsclone\\rsclone\\src\\components\\Footer.js",["92","93","94"],"import React from \"react\";\r\nimport rsschool from \"./assets/rs_school_js.svg\";\r\nimport i18next from \"i18next\";\r\n\r\nclass Footer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n \r\n    this.state={font:''};\r\n  \r\n  }\r\ncomponentWillReceiveProps(props) {\r\n  this.setState({font:props})\r\n  \r\n}\r\n  render() {\r\n    return (\r\n      <footer className=\"bg-dark text-center text-lg-start\" >\r\n        <div className=\"container p-4\" style={{fontFamily:`${this.state.font.value}`}}>\r\n          <div className=\"row\">\r\n            <div className=\"col-lg-6 col-md-12 mb-4 mb-md-0\" >\r\n              <h5 className=\"text-uppercase yellow-text\">\r\n                {\" \"}\r\n                The Rolling Scopes School\r\n              </h5>\r\n              <p className=\"text-white\">\r\n                {i18next.t(\"FreeCourse\")}{\" \"}\r\n                <a\r\n                  className=\"footer__link\"\r\n                  target=\"_blank\"\r\n                  href=\"https://rs.school/js/\"\r\n                >\r\n                  rs.school/js\r\n                </a>\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"col-lg-3 col-md-6 mb-4 mb-md-0\">\r\n              <h5 className=\"text-uppercase\"></h5>\r\n              <div>\r\n                <img className=\"footer__image\" src={rsschool}></img>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"col-lg-3 col-md-6 mb-4 mb-md-0\">\r\n              <h5 className=\"text-uppercase mb-0 yellow-text\">\r\n                {i18next.t(\"Developed\")}\r\n              </h5>\r\n\r\n              <ul className=\"list-unstyled\">\r\n                <li>\r\n                  <a className=\"\" href=\"https://github.com/YuPashintseva\">\r\n                    YuPashintseva\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a className=\"\" href=\"https://github.com/anatkig\">\r\n                    anatkig\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a className=\"\" href=\"https://github.com/vegas-muffin\">\r\n                    vegas-muffin\r\n                  </a>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"text-center p-3 text-white\">\r\n          {\" \"}\r\n          &copy; 2021 {i18next.t(\"Copyright\")} IMDb-clone\r\n        </div>\r\n      </footer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","C:\\Users\\Johnatan\\Desktop\\cloneWars20\\rsclone\\rsclone\\src\\components\\CaurouselMain.js",["95","96"],"import React from \"react\";\r\nimport Carousel from \"react-multi-carousel\";\r\nimport \"react-multi-carousel/lib/styles.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass CarouselMain extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { dataMain: [], type: \"films\", lang: this.props.lang };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let responseMain = await fetch(\r\n      `https://api.themoviedb.org/3/movie/popular?api_key=fb0fcc2d34caffc53da53d676fbf678a&language=${this.props.lang}&page=2`\r\n    );\r\n    if (this.props.type) {\r\n      if (this.props.type === \"films\") {\r\n        responseMain = await fetch(\r\n          `https://api.themoviedb.org/3/movie/popular?api_key=fb0fcc2d34caffc53da53d676fbf678a&language=${this.props.lang}&page=2`\r\n        );\r\n      } else if (this.props.type === \"people\") {\r\n        responseMain = await fetch(\r\n          `https://api.themoviedb.org/3/person/popular?api_key=fb0fcc2d34caffc53da53d676fbf678a&language=${this.props.lang}&page=2`\r\n        );\r\n      } else {\r\n        responseMain = await fetch(\r\n          `https://api.themoviedb.org/3/movie/464052/credits?api_key=fb0fcc2d34caffc53da53d676fbf678a&language=${this.props.lang}`\r\n        );\r\n        if (this.props.filmId) {\r\n          responseMain = await fetch(\r\n            `https://api.themoviedb.org/3/movie/${this.props.filmId}/credits?api_key=fb0fcc2d34caffc53da53d676fbf678a&language=${this.props.lang}`\r\n          );\r\n        }\r\n      }\r\n      this.setState({ type: this.props.type });\r\n    }\r\n    const jsonMain = await responseMain.json();\r\n    this.setState({ dataMain: jsonMain });\r\n  }\r\n  interestedCount(title) {\r\n    if (localStorage.getItem(\"count\")) {\r\n      let obj = JSON.parse(localStorage.getItem(\"count\"));\r\n      if (obj[title]) {\r\n        obj[title] = parseInt(obj[title]) + 1;\r\n      } else {\r\n        obj[title] = 1;\r\n      }\r\n      localStorage.setItem(\"count\", JSON.stringify(obj));\r\n    } else {\r\n      let obj = {};\r\n      obj[title] = 1;\r\n      localStorage.clear();\r\n      localStorage.setItem(\"count\", JSON.stringify(obj));\r\n    }\r\n  }\r\n\r\n  async updateURL(lang) {\r\n    let response = \"\";\r\n    try {\r\n      let response = await fetch(\r\n        `https://api.themoviedb.org/3/movie/popular?api_key=fb0fcc2d34caffc53da53d676fbf678a&language=${lang}&page=2`\r\n      );\r\n      const json = await response.json();\r\n      return json;\r\n    } catch (err) {\r\n      alert(err);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    let res = \"\";\r\n    if (prevProps.lang !== this.props.lang && this.props.type === \"films\") {\r\n      console.log(prevProps, this.props.lang);\r\n      res = this.updateURL(this.props.lang).then((value) => {\r\n        this.setState({ dataMain: value });\r\n        this.setState({ lang: this.props.lang });\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.state.dataMain.results) {\r\n      if (this.state.type === \"films\") {\r\n        const responsive = {\r\n          superLargeDesktop: {\r\n            breakpoint: { max: 4000, min: 3000 },\r\n            items: 5,\r\n          },\r\n          desktop: {\r\n            breakpoint: { max: 3000, min: 1024 },\r\n            items: 1,\r\n          },\r\n          tablet: {\r\n            breakpoint: { max: 1024, min: 464 },\r\n            items: 1,\r\n          },\r\n          mobile: {\r\n            breakpoint: { max: 464, min: 0 },\r\n            items: 1,\r\n          },\r\n        };\r\n        return (\r\n          <div className=\"main-carousel-wrapper\">\r\n            <Carousel\r\n              swipeable={false}\r\n              draggable={false}\r\n              showDots={false}\r\n              responsive={responsive}\r\n              ssr={true}\r\n              infinite={false}\r\n              autoPlaySpeed={1000}\r\n              keyBoardControl={true}\r\n              customTransition=\"all .5\"\r\n              transitionDuration={1000}\r\n              containerClass=\"carousel-container\"\r\n              dotListClass=\"custom-dot-list-style\"\r\n              itemClass=\"carousel-item-padding\"\r\n              centerMode={false}\r\n              slidesToSlide={3}\r\n            >\r\n              {this.state.dataMain.results.map((el) =>\r\n                el.backdrop_path ? (\r\n                  <div key={el.id}>\r\n                    <div key={el.id} className=\"main-carousel-img\">\r\n                      <Link to=\"/rsclone/FilmPage\">\r\n                        <img\r\n                          className=\"poster-img-main\"\r\n                          onClick={() =>\r\n                            this.interestedCount(el.original_title)\r\n                          }\r\n                          onMouseOver={() => {\r\n                            sessionStorage.removeItem(\"val\");\r\n                            sessionStorage.setItem(\"val\", JSON.stringify(el));\r\n                            sessionStorage.removeItem(\"lang\");\r\n                            sessionStorage.setItem(\"lang\", this.state.lang);\r\n                          }}\r\n                          src={`https://image.tmdb.org/t/p/original/${el.backdrop_path}`}\r\n                          alt={el.title}\r\n                        />\r\n                      </Link>\r\n                      <h2>\r\n                        <span>{el.title}</span>\r\n                      </h2>\r\n                    </div>\r\n                  </div>\r\n                ) : null\r\n              )}\r\n              ;\r\n            </Carousel>\r\n          </div>\r\n        );\r\n      } else if (this.state.type === \"people\") {\r\n        const responsive = {\r\n          superLargeDesktop: {\r\n            breakpoint: { max: 4000, min: 3000 },\r\n            items: 5,\r\n          },\r\n          desktop: {\r\n            breakpoint: { max: 3000, min: 1024 },\r\n            items: 5,\r\n          },\r\n          tablet: {\r\n            breakpoint: { max: 1024, min: 464 },\r\n            items: 3,\r\n          },\r\n          mobile: {\r\n            breakpoint: { max: 464, min: 0 },\r\n            items: 2,\r\n          },\r\n        };\r\n        return (\r\n          <div className=\"main-carousel-wrapper\">\r\n            <Carousel\r\n              swipeable={false}\r\n              draggable={true}\r\n              showDots={false}\r\n              responsive={responsive}\r\n              ssr={true}\r\n              infinite={false}\r\n              autoPlaySpeed={1000}\r\n              keyBoardControl={true}\r\n              customTransition=\"all .5\"\r\n              transitionDuration={1000}\r\n              containerClass=\"carousel-container\"\r\n              dotListClass=\"custom-dot-list-style\"\r\n              itemClass=\"carousel-item-padding\"\r\n              centerMode={false}\r\n              slidesToSlide={3}\r\n            >\r\n              {this.state.dataMain.results.map((el) =>\r\n                el.profile_path ? (\r\n                  <div key={el.id}>\r\n                    <div key={el.id} className=\"main-carousel-img\">\r\n                        <img\r\n                          className=\"poster-img-main rounded-img\"\r\n                          onMouseOver={() => {\r\n                            sessionStorage.removeItem(\"val\");\r\n                            sessionStorage.setItem(\"val\", JSON.stringify(el));\r\n                          }}\r\n                          src={`https://image.tmdb.org/t/p/original/${el.profile_path}`}\r\n                          alt={el.profile_path}\r\n                        />\r\n                      <h2 className=\"star-name-carousel\">{el.name}</h2>\r\n                    </div>\r\n                  </div>\r\n                ) : null\r\n              )}\r\n              ;\r\n            </Carousel>\r\n          </div>\r\n        );\r\n      }\r\n    } else if (this.state.type === \"actors\" && this.state.dataMain.cast) {\r\n      const responsive = {\r\n        superLargeDesktop: {\r\n          breakpoint: { max: 4000, min: 3000 },\r\n          items: 5,\r\n        },\r\n        desktop: {\r\n          breakpoint: { max: 3000, min: 1024 },\r\n          items: 5,\r\n        },\r\n        tablet: {\r\n          breakpoint: { max: 1024, min: 464 },\r\n          items: 4,\r\n        },\r\n        mobile: {\r\n          breakpoint: { max: 464, min: 0 },\r\n          items: 2,\r\n        },\r\n      };\r\n\r\n      return (\r\n        <div className=\"main-carousel-wrapper\">\r\n          <Carousel\r\n            swipeable={false}\r\n            draggable={false}\r\n            showDots={false}\r\n            responsive={responsive}\r\n            ssr={true}\r\n            infinite={false}\r\n            autoPlaySpeed={1000}\r\n            keyBoardControl={true}\r\n            customTransition=\"all .5\"\r\n            transitionDuration={1000}\r\n            containerClass=\"carousel-container\"\r\n            dotListClass=\"custom-dot-list-style\"\r\n            itemClass=\"carousel-item-padding\"\r\n            centerMode={false}\r\n            slidesToSlide={3}\r\n          >\r\n            {this.state.dataMain.cast.map((el) =>\r\n              el.profile_path ? (\r\n                <div key={el.id}>\r\n                  <div key={el.id} className=\"main-carousel-img\">\r\n                    {el.profile_path && (\r\n                      <img\r\n                        className=\"poster-img-main rounded-img\"\r\n                        onMouseOver={() => {\r\n                          sessionStorage.removeItem(\"val\");\r\n                          sessionStorage.setItem(\"val\", JSON.stringify(el));\r\n                        }}\r\n                        src={`https://image.tmdb.org/t/p/original/${el.profile_path}`}\r\n                        alt={el.profile_path}\r\n                      />\r\n                    )}\r\n                    <div>\r\n                      <h2 className=\"star-name-carousel\">{el.name}</h2>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ) : null\r\n            )}\r\n          </Carousel>\r\n        </div>\r\n      );\r\n    } else {\r\n      return <div className=\"text-white\">Wait a little</div>;\r\n    }\r\n  }\r\n}\r\n\r\nexport default CarouselMain;\r\n","C:\\Users\\Johnatan\\Desktop\\cloneWars20\\rsclone\\rsclone\\src\\components\\Movie.js",["97","98"],"import React from \"react\";\r\nimport noImage from \"./assets/noimage.jpg\";\r\nimport star from \"./assets/megastar.png\";\r\n\r\nconst Movie = (props) => {\r\n  return (\r\n    <div id=\"fp\" className=\"container-fluid wrapper wrapperStyle\">\r\n      <div id=\"upperBlock\" className=\"wrapper\">\r\n        <div className=\"row\">\r\n\r\n                     <h2 className=\"col\">{props.original_title}</h2>\r\n\r\n\r\n\r\n          <h4 className=\"col-auto\">\r\n            Average Vote: {props.vote_average}\r\n            <img className=\"star\" src={star} />\r\n          </h4>\r\n\r\n          <h4 className=\"col-auto\">Votes: {props.vote_count}</h4>\r\n        </div>\r\n      </div>\r\n      <div id=\"briefInfo\" className=\"wrapper\">\r\n        <h5>Release Date: {props.release_date}</h5>\r\n        <div></div>\r\n      </div>\r\n\r\n      <div\r\n        id=\"photoVideo\"\r\n        className=\"row\"\r\n        style={{ padding: \"1% 5% 1% 5%\", margin: \"0%\", border: \"0%\" }}\r\n      >\r\n        {props.poster_path == null ? (\r\n          <img src={noImage} width=\"50%\" height=\"auto\" alt=\"card image\"></img>\r\n        ) : (\r\n          <img\r\n            width=\"50%\"\r\n            height=\"auto\"\r\n            src={`https://image.tmdb.org/t/p/w600_and_h900_bestv2${props.poster_path}`}\r\n            alt={props.release_date}\r\n            style={{ margin: \"2%\" }}\r\n          />\r\n        )}\r\n      </div>\r\n      <div style={{ margin: \"8px\" }}>\r\n        <h4 style={{ fontWeight: \"bolder\" }}>Overview:</h4>\r\n        <h5> {props.overview}</h5>\r\n      </div>\r\n\r\n      <div id=\"videoCarousel\" className=\"wrapper\"></div>\r\n      <div id=\"photoCarousel\" className=\"wrapper\"></div>\r\n      <div id=\"cast\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Movie;\r\n",["99","100"],"C:\\Users\\Johnatan\\Desktop\\cloneWars20\\rsclone\\rsclone\\src\\components\\ModalWindow.js",[],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":142,"column":11,"nodeType":"107","endLine":142,"endColumn":73},{"ruleId":"105","severity":1,"message":"106","line":147,"column":11,"nodeType":"107","endLine":147,"endColumn":78},{"ruleId":"105","severity":1,"message":"106","line":152,"column":11,"nodeType":"107","endLine":152,"endColumn":67},{"ruleId":"105","severity":1,"message":"106","line":155,"column":11,"nodeType":"107","endLine":155,"endColumn":77},{"ruleId":"108","severity":1,"message":"109","line":191,"column":17,"nodeType":"107","endLine":191,"endColumn":65},{"ruleId":"105","severity":1,"message":"106","line":201,"column":21,"nodeType":"107","endLine":201,"endColumn":55},{"ruleId":"105","severity":1,"message":"106","line":251,"column":19,"nodeType":"107","endLine":258,"endColumn":20},{"ruleId":"105","severity":1,"message":"106","line":264,"column":21,"nodeType":"107","endLine":264,"endColumn":45},{"ruleId":"110","severity":1,"message":"111","line":9,"column":7,"nodeType":"112","messageId":"113","endLine":9,"endColumn":15},{"ruleId":"110","severity":1,"message":"114","line":13,"column":13,"nodeType":"112","messageId":"113","endLine":13,"endColumn":21},{"ruleId":"110","severity":1,"message":"115","line":35,"column":13,"nodeType":"112","messageId":"113","endLine":35,"endColumn":16},{"ruleId":"108","severity":1,"message":"109","line":58,"column":22,"nodeType":"107","endLine":58,"endColumn":57},{"ruleId":"116","severity":1,"message":"117","line":75,"column":17,"nodeType":"107","endLine":75,"endColumn":134},{"ruleId":"110","severity":1,"message":"114","line":64,"column":13,"nodeType":"112","messageId":"113","endLine":64,"endColumn":21},{"ruleId":"110","severity":1,"message":"115","line":79,"column":13,"nodeType":"112","messageId":"113","endLine":79,"endColumn":16},{"ruleId":"110","severity":1,"message":"118","line":2,"column":8,"nodeType":"112","messageId":"113","endLine":2,"endColumn":15},{"ruleId":"105","severity":1,"message":"106","line":55,"column":9,"nodeType":"107","endLine":55,"endColumn":63},{"ruleId":"119","severity":1,"message":"120","line":57,"column":13,"nodeType":"107","endLine":61,"endColumn":15},{"ruleId":"105","severity":1,"message":"106","line":68,"column":9,"nodeType":"107","endLine":68,"endColumn":71},{"ruleId":"121","severity":1,"message":"122","line":28,"column":17,"nodeType":"107","endLine":32,"endColumn":18},{"ruleId":"123","severity":1,"message":"124","line":39,"column":15,"nodeType":"107","endLine":39,"endColumn":46},{"ruleId":"108","severity":1,"message":"109","line":41,"column":17,"nodeType":"107","endLine":41,"endColumn":63},{"ruleId":"110","severity":1,"message":"114","line":58,"column":9,"nodeType":"112","messageId":"113","endLine":58,"endColumn":17},{"ruleId":"110","severity":1,"message":"115","line":74,"column":7,"nodeType":"112","messageId":"113","endLine":74,"endColumn":10},{"ruleId":"108","severity":1,"message":"109","line":17,"column":13,"nodeType":"107","endLine":17,"endColumn":48},{"ruleId":"119","severity":1,"message":"120","line":34,"column":11,"nodeType":"107","endLine":34,"endColumn":73},{"ruleId":"101","replacedBy":"125"},{"ruleId":"103","replacedBy":"126"},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-unused-vars","'Language' is assigned a value but never used.","Identifier","unusedVar","'response' is assigned a value but never used.","'res' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","'profile' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.",["127"],["128"],"no-global-assign","no-unsafe-negation"]